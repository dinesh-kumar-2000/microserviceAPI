CREATE TABLE [dbo].[Users]
(
    Id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserName NVARCHAR(256) NOT NULL UNIQUE,
    Email NVARCHAR(256) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(512) NOT NULL,
    SecurityStamp NVARCHAR(512) NULL,
    IsEmailConfirmed BIT NOT NULL DEFAULT 0,
    IsLockedOut BIT NOT NULL DEFAULT 0,
    LockoutEnd DATETIMEOFFSET NULL,
    CreatedAt DATETIMEOFFSET NOT NULL DEFAULT SYSDATETIMEOFFSET(),
    UpdatedAt DATETIMEOFFSET NOT NULL DEFAULT SYSDATETIMEOFFSET()
);

ALTER TABLE [dbo].[Users]
ADD 
    FirstName NVARCHAR(128) NULL,
    LastName NVARCHAR(128) NULL,
    PhoneNumber NVARCHAR(32) NULL,
    AccessFailedCount INT NOT NULL DEFAULT(0),
    LastLoginAt DATETIMEOFFSET NULL,
    TwoFactorEnabled BIT NOT NULL DEFAULT(0),
    AuthenticatorKey NVARCHAR(256) NULL;



CREATE TABLE [dbo].[Roles]
(
    Id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    Name NVARCHAR(128) NOT NULL UNIQUE,
    Description NVARCHAR(256) NULL
);


CREATE TABLE [dbo].[UserRoles]
(
    UserId UNIQUEIDENTIFIER NOT NULL,
    RoleId UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY (UserId, RoleId),
    FOREIGN KEY (UserId) REFERENCES [dbo].[Users](Id) ON DELETE CASCADE,
    FOREIGN KEY (RoleId) REFERENCES [dbo].[Roles](Id) ON DELETE CASCADE
);
CREATE TABLE [dbo].[RefreshTokens]
(
    Id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserId UNIQUEIDENTIFIER NOT NULL,
    Token NVARCHAR(512) NOT NULL,
    ExpiresAt DATETIMEOFFSET NOT NULL,
    CreatedAt DATETIMEOFFSET NOT NULL DEFAULT SYSDATETIMEOFFSET(),
    RevokedAt DATETIMEOFFSET NULL,
    ReplacedByToken NVARCHAR(512) NULL,
    FOREIGN KEY (UserId) REFERENCES [dbo].[Users](Id) ON DELETE CASCADE
);

CREATE TABLE [dbo].[UserClaims]
(
    Id INT PRIMARY KEY IDENTITY(1,1),
    UserId UNIQUEIDENTIFIER NOT NULL,
    ClaimType NVARCHAR(256) NOT NULL,
    ClaimValue NVARCHAR(512) NOT NULL,
    FOREIGN KEY (UserId) REFERENCES [dbo].[Users](Id) ON DELETE CASCADE
);

CREATE TABLE [dbo].[AuditLogs]
(
    Id BIGINT PRIMARY KEY IDENTITY(1,1),
    UserId UNIQUEIDENTIFIER NULL,
    EventType NVARCHAR(128) NOT NULL,
    EventData NVARCHAR(MAX) NULL,
    OccurredAt DATETIMEOFFSET NOT NULL DEFAULT SYSDATETIMEOFFSET(),
    FOREIGN KEY (UserId) REFERENCES [dbo].[Users](Id)
);

CREATE TABLE [dbo].[UserLogins]
(
    UserId UNIQUEIDENTIFIER NOT NULL,
    LoginProvider NVARCHAR(128) NOT NULL,
    ProviderKey NVARCHAR(256) NOT NULL,
    ProviderDisplayName NVARCHAR(256) NULL,
    PRIMARY KEY (UserId, LoginProvider, ProviderKey),
    FOREIGN KEY (UserId) REFERENCES [dbo].[Users](Id) ON DELETE CASCADE
);

CREATE TABLE [dbo].[RoleClaims]
(
    Id INT PRIMARY KEY IDENTITY(1,1),
    RoleId UNIQUEIDENTIFIER NOT NULL,
    ClaimType NVARCHAR(256) NOT NULL,
    ClaimValue NVARCHAR(512) NOT NULL,
    FOREIGN KEY (RoleId) REFERENCES [dbo].[Roles](Id) ON DELETE CASCADE
);

CREATE TABLE [dbo].[UserTokens]
(
    Id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserId UNIQUEIDENTIFIER NOT NULL,
    Token NVARCHAR(512) NOT NULL,
    TokenType NVARCHAR(64) NOT NULL, -- e.g., 'PasswordReset', 'EmailVerify'
    ExpiresAt DATETIMEOFFSET NOT NULL,
    ConsumedAt DATETIMEOFFSET NULL,
    CreatedAt DATETIMEOFFSET NOT NULL DEFAULT SYSDATETIMEOFFSET(),
    FOREIGN KEY (UserId) REFERENCES [dbo].[Users](Id) ON DELETE CASCADE
);

ALTER TABLE [dbo].[Users] ADD
    TwoFactorEnabled BIT NOT NULL DEFAULT 0,
    AuthenticatorKey NVARCHAR(256) NULL; -- If using app-based 2FA


    CREATE TABLE Permissions (
    Id UNIQUEIDENTIFIER PRIMARY KEY,
    Name NVARCHAR(128) NOT NULL,    -- e.g., Permissions.Product.Edit
    Resource NVARCHAR(64) NOT NULL, -- e.g., Product
    Action NVARCHAR(32) NOT NULL,   -- e.g., Edit
    Description NVARCHAR(256) NULL
);

-- RolePermissions (join table)
CREATE TABLE RolePermissions (
    RoleId UNIQUEIDENTIFIER NOT NULL,
    PermissionId UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY (RoleId, PermissionId),
    FOREIGN KEY (RoleId) REFERENCES Roles(Id),
    FOREIGN KEY (PermissionId) REFERENCES Permissions(Id)
);